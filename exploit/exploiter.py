# File: exploiter.py
# This file holds the Exploiter class responsible for generating the next prompt in a red-team simulation attack chain.

from openai import OpenAI
from utils.config import OPENAI_API_KEY, EXPLOITER_PROMPT
from utils.chat_context import ChatMessageBuilder

# Exploiter creates prompts for an attack chain
class Exploiter:
    
    def __init__(self, client=None):
        self.client = client or OpenAI(api_key=OPENAI_API_KEY)

    # Generates the next attack prompt based on the simulation context
    def create_prompt(self, bot_type: str, context: list, suggestive_prompt: str, mode: str, previous_response: str, max_iterations: int, model: str = "gpt-4") -> str:
        # Initialize the message builder with system prompt and context
        builder = ChatMessageBuilder(system_prompt=EXPLOITER_PROMPT, context_entries=context)

        # Prepend metadata about the simulation
        builder.prepend_message("user", f"bot_type: {bot_type}")
        builder.prepend_message("user", f"mode: {mode}")
        builder.prepend_message("user", f"max_iterations: {max_iterations}")

        # Append the previous response and any suggestive prompt
        builder.append_message("user", f"previous_response: {previous_response}")
        builder.append_message("user", f"suggested_prompt: {suggestive_prompt or 'None'}")

        # Render everything as combined user messages
        messages = builder.build_messages(
            mode="combined_user",
            template="Prompt: {prompt} Response: {response}"
        )

        # Call the model
        result = self.client.chat.completions.create(
            model=model,
            messages=messages
        )

        return result.choices[0].message.content.strip()
