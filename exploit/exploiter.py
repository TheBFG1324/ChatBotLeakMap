# File: exploiter.py
# This file holds the Exploiter class responsible for generating the next prompt in a red-team simulation attack chain.

# Import needed packages
from openai import OpenAI
from utils.config import OPENAI_API_KEY, EXPLOITER_PROMPT

# Exploiter creates prompts for an attack chain
class Exploiter:
    
    def __init__(self, client=None):
        self.client = client or OpenAI(api_key=OPENAI_API_KEY)

    # Generates the next attack prompt based on the simulation context
    def create_prompt(self, bot_type: str, context: list, suggestive_prompt: str, mode: str, previous_response: str, max_iterations: int, model: str = "gpt-4") -> str:
        system_prompt = EXPLOITER_PROMPT
        messages = [{"role": "system", "content": system_prompt}]

        # Add bot type and mode info
        messages.append({"role": "user", "content": f"bot_type: {bot_type}"})
        messages.append({"role": "user", "content": f"mode: {mode}"})
        messages.append({"role": "user", "content": f"max_iterations: {max_iterations}"})

        # Add prior context if it exists
        if context:
            for entry in sorted(context, key=lambda x: x["message_number"]):
                messages.append({"role": "user", "content": f"Prompt: {entry['prompt']} Response: {entry['response']}"})
        else:
            messages.append({"role": "user", "content": "context is empty â€” this is the beginning of the prompt chain."})

        # Add previous response and optional suggestive prompt
        messages.append({"role": "user", "content": f"previous_response: {previous_response}"})
        messages.append({"role": "user", "content": f"suggested_prompt: {suggestive_prompt or 'None'}"})

        # Query the model
        result = self.client.chat.completions.create(
            model=model,
            messages=messages
        )

        return result.choices[0].message.content.strip()
