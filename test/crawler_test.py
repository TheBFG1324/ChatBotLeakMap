# File: test_crawler.py
# This file checks the implementation of the crawler and classifier functionality. Generated by OpenAI's o4 model

import pytest
from unittest.mock import patch, Mock

from crawler.crawler import ChatbotCrawler


# Sample HTMLs for testing
HTML_WITH_CHAT = '''
<html>
  <body>
    <textarea></textarea>
    <script>
      fetch('/chat')
    </script>
  </body>
</html>
'''

HTML_WITHOUT_CHAT = '''
<html>
  <body>
    <p>Hello, world!</p>
  </body>
</html>
'''


def test_detect_chatbot_true():
    crawler = ChatbotCrawler(urls=[])
    assert crawler.detect_chatbot(HTML_WITH_CHAT) is True


def test_detect_chatbot_false():
    crawler = ChatbotCrawler(urls=[])
    assert crawler.detect_chatbot(HTML_WITHOUT_CHAT) is False


def test_extract_api_url_from_script():
    crawler = ChatbotCrawler(urls=[])
    url = crawler.extract_api_url(HTML_WITH_CHAT, "http://example.com")
    assert url == "http://example.com/chat"


def test_generate_bot_id():
    crawler = ChatbotCrawler(urls=[])
    bot_id = crawler.generate_bot_id("http://example.com/chat")
    assert bot_id == "example.com"


def test_generate_bot_name():
    crawler = ChatbotCrawler(urls=[])
    name = crawler.generate_bot_name("http://financecorp.local/chat")
    assert name == "Financecorp"


@patch("crawler.crawler.requests.get")
@patch("crawler.crawler.classify_bot", return_value="finance")
@patch("crawler.crawler.Neo4jDriver")
def test_discover_and_register(mock_driver_class, mock_classify, mock_get):
    # Setup mock HTML response
    mock_resp = Mock()
    mock_resp.status_code = 200
    mock_resp.text = HTML_WITH_CHAT
    mock_get.return_value = mock_resp

    # Mock insert_bot and close
    mock_driver = mock_driver_class.return_value
    mock_driver.insert_bot = Mock()
    mock_driver.close = Mock()

    # Run crawler
    crawler = ChatbotCrawler(urls=["http://financecorp.local"])
    bots = crawler.discover_and_register()

    # Assertions
    assert len(bots) == 1
    assert bots[0]["bot_id"] == "financecorp.local"
    assert bots[0]["bot_name"] == "Financecorp"
    assert bots[0]["domain"] == "finance"
    assert bots[0]["api_url"] == "http://financecorp.local/chat"

    mock_driver.insert_bot.assert_called_once()
    mock_driver.close.assert_called_once()
